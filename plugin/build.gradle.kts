group = "org.example"
version = "1.0"
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
//    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.31"
    id("java-gradle-plugin")
    id("maven-publish")
    id("com.gradle.plugin-publish") version "0.14.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

//gradlePlugin {
//     Define the plugin
//    val greeting by plugins.creating {
//        id = "gradlep.greeting"
//        implementationClass = "gradlep.GradlepPlugin"
//    }
//}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

gradlePlugin {

    // Define the plugin
    val greeting by plugins.creating {
        id = "gradlep.greeting"
        implementationClass = "gradlep.GradlepPlugin"
    }

//    plugins {
//        create("gradlepPlugin") {
//            id = "org.example.gradlep"
//            displayName = "Greeting Plugin"
//            implementationClass = "gradlep.GradlepPlugin"
//        }
//    }
}

pluginBundle {
    website = "https://github.com/fabian-juarez"
    vcsUrl = "https://github.com/fabian-juarez/gradlep"
    tags = listOf("example", "template")

    (plugins) {

        // first plugin
        "greeting" {
            // id is captured from java-gradle-plugin configuration
            displayName = "Gradle Greeting plugin"
            description = "Gradle plugin test"
            tags = listOf("individual", "tags", "per", "plugin")
            version = "1.1"
        }
    }


//    mavenCoordinates {
//        groupId = "org.samples.override"
//        artifactId = "gradlep-plugins"
//        version = "1.4"
//    }
}